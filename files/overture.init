#!/bin/sh /etc/rc.common

USE_PROCD=1

START=99

CRON_FILE=/etc/crontabs/root

add_dns_object() {
	json_add_object
	json_add_string Name "$(config_get $1 Name)"
	json_add_string Address $(config_get $1 Address)
	json_add_string Protocol $(config_get $1 Protocol)
	json_add_string SOCKS5Address $(config_get $1 SOCKS5Address)
	json_add_int Timeout $(config_get $1 Timeout)
	json_add_object EDNSClientSubnet
	json_close_object
	json_close_object
}

generate_json() {
	local okay
	json_init
	json_add_string BindAddress $(config_get $1 BindAddress)
	json_add_string DebugHTTPAddress $(config_get $1 DebugHTTPAddress)
	json_add_array PrimaryDNS
		config_list_foreach $1 PrimaryDNS add_dns_object
	json_close_array
	json_add_array AlternativeDNS
		config_list_foreach $1 AlternativeDNS add_dns_object
	json_close_array
	config_get_bool okay $1 OnlyPrimaryDNS; json_add_boolean OnlyPrimaryDNS $okay
	config_get_bool okay $1 IPv6UseAlternativeDNS; json_add_boolean IPv6UseAlternativeDNS $okay
	config_get_bool okay $1 AlternativeDNSConcurrent; json_add_boolean AlternativeDNSConcurrent $okay
	json_add_int PoolIdleTimeout $(config_get $1 PoolIdleTimeout)
	json_add_int PoolMaxCapacity $(config_get $1 PoolMaxCapacity)
	json_add_string WhenPrimaryDNSAnswerNoneUse $(config_get $1 WhenPrimaryDNSAnswerNoneUse)
	json_add_object IPNetworkFile
		json_add_string Primary $(config_get $1 IPNetworkFilePrimary)
		json_add_string Alternative $(config_get $1 IPNetworkFileAlternative)
	json_close_object
	json_add_object DomainFile
		json_add_string Primary $(config_get $1 DomainFilePrimary)
		json_add_string Alternative $(config_get $1 DomainFileAlternative)
		json_add_string Matcher $(config_get $1 DomainFileMatcher)
	json_close_object
	json_add_object HostsFile
		json_add_string HostsFile $(config_get $1 HostsFile)
		json_add_string Finder $(config_get $1 HostsFileFinder)
	json_close_object
	json_add_int MinimumTTL $(config_get $1 MinimumTTL)
	json_add_string DomainTTLFile $(config_get $1 DomainTTLFile)
	json_add_int CacheSize $(config_get $1 CacheSize)
	json_add_array RejectQType
		config_list_foreach $1 RejectQType "json_add_int ''"
	json_close_array

	json_dump > /var/run/overture/overture-$1.json
}

overture_parameters() {
	[ "$(config_get $1 VerboseMode)" == "1" ] && echo -v
	[ "$(config_get $1 LogToFile)" != "" ] && echo -l $(config_get $1 LogToFile)
	[ "$(config_get $1 CoreNumber)" != "" ] && echo -p $(config_get $1 CoreNumber)
}

add_cron() {
	local enable
	local auto_update_ipnetwork
	config_get_bool enable $1 Enable
	config_get_bool auto_update_ipnetwork $1 AutoUpdateIPNetworkFilePrimary
	touch $CRON_FILE
	sed -i '/overture_update_ipnetwork_file/d' $CRON_FILE
	([ "$enable" = 1 ] && [ "$auto_update_ipnetwork" = 1 ]) && echo "0 5 * * 6 /etc/overture/overture_update_ipnetwork_file.sh >>/tmp/overture_update.log 2>&1" >>$CRON_FILE
	crontab $CRON_FILE
}

del_cron() {
	sed -i '/overture_update_ipnetwork_file/d' $CRON_FILE
	/etc/init.d/cron restart
}

overture_start() {
	[ "$(config_get $1 Enable)" == "1" ] || return

	local json_file

	if [ "$(config_get $1 json)" != "" ]; then
		json_file="$(config_get $1 json)"
	else
		generate_json $1
		json_file="/var/run/overture/overture-$1.json"
	fi

	procd_open_instance overture-$1
	procd_set_param command overture -c $json_file $(overture_parameters $1)
	procd_set_param pidfile /var/run/overture/overture-$1.pid
	procd_set_param respawn
	procd_set_param stdout 1
	procd_set_param stderr 1
	procd_close_instance
}

# ===== Begin of PROCD part ===== #

start_service() {
	mkdir /var/run/overture
	config_load overture
	config_foreach add_cron overture
	config_foreach overture_start overture
}

stop_service() {
	rm -r /var/run/overture
	del_cron
}
